import json
from typing import Any
from prettytable import PrettyTable
import psycopg2
from files import file_path_vac_hh


def write_in_json(content):
    """
    Чтение запроса и запись его в файл json
    """
    for x in range(len(content['items'])):
        # Название вакансии
        vac_name = content['items'][x]['name']
        # Ссылка на вакансию
        vac_url = content['items'][x]['alternate_url']
        # Что требуется при устройстве на вакансию
        vac_snippet = content['items'][x]['snippet']["requirement"]
        # Название компании работадателя
        vac_work_app_name = content['items'][x]['employer']['name']

        searching_data = {'items': [{
            'Название ваканскии': vac_name,
            # 'Тип занятости': vac_employment,
            # 'Опыт работы': vac_experience,
            # 'Зарплата от': vac_salary_from,
            # 'Зарплата до': vac_salary_to,
            # 'Валюта': vac_currency,
            'API': 'HeadHunter',
            'url': vac_url,
            'Требования': vac_snippet,
            'Название компании': vac_work_app_name,
            # 'Адрес': vac_address
        }]}
        searching_data_app = {'items': {
            'Название ваканскии': vac_name,
            # 'Тип занятости': vac_employment,
            # 'Опыт работы': vac_experience,
            # 'Зарплата от': vac_salary_from,
            # 'Зарплата до': vac_salary_to,
            # 'Валюта': vac_currency,
            'API': 'HeadHunter',
            'url': vac_url,
            'Требования': vac_snippet,
            'Название компании': vac_work_app_name,
            # 'Адрес': vac_address
        }}

        with open(file_path_vac_hh, 'r+') as f_1:
            try:
                contic = json.load(f_1)
                with open(file_path_vac_hh, 'r+') as file:
                    file_data = json.load(file)
                    # Объединяем всё единый формат
                    file_data["items"].append(searching_data_app['items'])
                    # Устанавливаем текущее положение файла со смещением
                    file.seek(0)
                    # преобразоваем обратно в json
                    json.dump(file_data, file, indent=2, ensure_ascii=False)
            except:
                with open(file_path_vac_hh, "w") as file:
                    # Записываем данные в файл JSON
                    json.dump(searching_data, file, indent=2, ensure_ascii=False)


def create_database(database_name: str, params: dict):
    """Создание базы данных и таблиц для сохранения данных о компании и вакансиях."""

    conn = psycopg2.connect(dbname='postgres', **params)
    conn.autocommit = True
    cur = conn.cursor()

    # cur.execute(f"DROP DATABASE {database_name}")
    cur.execute(f"CREATE DATABASE {database_name}")

    conn.close()

    conn = psycopg2.connect(dbname=database_name, **params)

    with conn.cursor() as cur:
        cur.execute("""
            CREATE TABLE company
            (
                company_id SERIAL PRIMARY KEY,
                company_name_from_search VARCHAR(255) NOT NULL,
                company_url TEXT
                )
            """)

    with conn.cursor() as cur:
        cur.execute("""
            CREATE TABLE vacancy (
                vacancy_id SERIAL PRIMARY KEY,
                company_id INT REFERENCES company(company_id),
                vacancy_name VARCHAR(255) NOT NULL,
                salary_from INT,
                salary_to INT,
                vacancy_requirement TEXT,
                vacancy_responsibility TEXT,
                vacancy_url TEXT,
                vacancy_experience VARCHAR(40),
                vacancy_employment VARCHAR(40),
                company_name VARCHAR(100)
            )
        """)

    conn.commit()
    conn.close()


def write_in_database(data: list[dict[str, Any]], database_name: str, params: dict):
    """Сохранение данных о каналах и видео в базу данных."""

    conn = psycopg2.connect(dbname=database_name, **params)

    with conn.cursor() as cur:
        for company in data:
            company_data = company['data']['items'][0]
            cur.execute(
                """
                INSERT INTO company (company_name_from_search, company_url)
                VALUES (%s, %s)
                RETURNING company_id
                """,
                (company['company_name_from_search'], company_data['employer']['alternate_url'])
            )
            company_id = cur.fetchone()[0]
            # cur.execute('TRUNCATE TABLE company RESTART IDENTITY')
            vacancy_data = company['data']['items']
            for vacancy_data_items in vacancy_data:
                # cur.execute(
                #     """
                #     INSERT INTO vacancy (company_id, vacancy_name, salary_from, salary_to, vacancy_requirement,
                #     vacancy_responsibility, vacancy_url, vacancy_experience, vacancy_employment, company_name)
                #     VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                #     """,
                #     (company_id, vacancy_data_items['name'],
                #      vacancy_data_items['salary']['from'],
                #      vacancy_data_items['salary']['to'],
                #      vacancy_data_items['snippet']['requirement'], vacancy_data_items['snippet']['responsibility'],
                #      vacancy_data_items['alternate_url'], vacancy_data_items['experience']['name'],
                #      vacancy_data_items['employment']['name'],
                #      vacancy_data_items['employer']['name']
                #      )
                # )
                # Если зарплаты нет в одной из ячейки, то она дублируется в отсутствующую ячейку
                vac_from = vacancy_data_items['salary']['from']
                vac_to = vacancy_data_items['salary']['to']
                if vac_from is None:
                    vac_from = vac_to
                elif vac_to is None:
                    vac_to = vac_from

                cur.execute(
                    """
                    INSERT INTO vacancy (company_id, vacancy_name, salary_from, salary_to, vacancy_requirement,
                    vacancy_responsibility, vacancy_url, vacancy_experience, vacancy_employment, company_name)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """,
                    (company_id, vacancy_data_items['name'],
                     vac_from,
                     vac_to,
                     vacancy_data_items['snippet']['requirement'], vacancy_data_items['snippet']['responsibility'],
                     vacancy_data_items['alternate_url'], vacancy_data_items['experience']['name'],
                     vacancy_data_items['employment']['name'],
                     vacancy_data_items['employer']['name']
                     )
                )

    conn.commit()
    conn.close()


# def print_table(table_head, table_data):
# Определяем твою шапку и данные.
# table_head = ['MAC Address', 'IP Address', 'Mode', 'Rate (Mbps)', 'Signal (%)']
# table_data = ['11:11:11:11:11:11', '192.168.0.103', '11n', '65', '100',
#               '11:11:11:11:11:11', '192.168.0.103', '11n', '65', '100',
#               '11:11:11:11:11:11', '192.168.0.103', '11n', '65', '100',
#               '11:11:11:11:11:11', '192.168.0.103', '11n', '65', '100',
#               '11:11:11:11:11:11', '192.168.0.103', '11n', '65', '100']
# th_3 =
# td_3 = [('Машинист энергоблока', 96095), ('Инженер-обследователь', 90000), ('Специалист договорного отдела (проектирование)', 80000), ('Бариста в Smile Coffee', 750), ('Архитектор (Revit)', 105000), ('Бухгалтер (строительство\\проектирование)', 70000), ('Электрослесарь по ремонту оборудования распределительных устройств 5 разряда', 52380), ('Инженер-гидротехник (специалист по водопонижению)', 100000), ('IT методолог', 600000), ('Лаборант химического анализа 4 разряда', 45000), ('Ведущий Менеджер Управления мониторинга и Service Desk Департамента Информационных Технологий', 400000), ('Оператор Контакт-центра (Минск)', 900), ('Оператор Контакт-центра по обслуживанию юридических лиц и ИП', 1000), ('Старший брокер', 55000), ('Системный аналитик/техпис', 250000), ('Офис-менеджер', 30000), ('Менеджер по работе с корпоративными клиентами (продажи).', 100000), ('Руководитель группы системного администрирования с навыками devops', 250000), ('Специалист отдела сопровождения торгов', 67500), ('Заведующий складом (зарубежная площадка)', 112500), ('Менеджер по персоналу (удаленно)', 90000), ('Специалист по кадрам', 95000), ('Специалист по закупкам', 100000), ('Начальник группы', 150000), ('Главный специалист в группу инспекторов ночного обхода Филиала в АР Египет', 150000), ('Кладовщик', 58000), ('Ведущий инженер по сопровождению серийного производства', 127500), ('Аналитик в планово-диспетчерский отдел', 120000), ('Мастер', 105000), ('Прессовщик изделий из пластмасс/Ученик', 70000), ('Монтажник радиоэлектронной аппаратуры и приборов', 107500), ('Комплектовщик изделий и инструментов', 60000), ('Специалист по логистике', 95500), ('Младший научный сотрудник', 90000), ('Специалист по материально-техническому снабжению (п 99)', 110000), ('Электромонтер по ремонту и обслуживанию электрооборудования 4 разряда (Бангладеш)', 130000), ('Инженер', 108000), ('Монтажник систем вентиляции и кондиционирования (Бангладеш)', 425000), ('Эксперт отдела экономического труда и заработной платы', 200000), ('Матрос береговой', 60000), ('Специалист', 44000), ('Грузчик', 51000), ('Водитель автомобиля (Передвижная лаборатория)', 51500), ('Оператор нефтебазы', 42500), ('Оператор 1С', 57500), ('Водитель категории Е', 70000), ('Оператор нефтебазы', 57500), ('Водитель-пробоотборщик', 39000), ('Администратор/менеджер в службу "Клининг"', 36000), ('Водитель автомобиля категории С', 51500), ('Лаборант химического анализа (4 разряд)', 45000), ('Специалист материального технического обеспечения', 43000), ('Оператор товарный', 45000), ('Лаборант химического анализа 5 разряда (г. Барнаул)', 47500), ('Оператор-кассир на АЗС (г. Задонск, 430 км М4)', 50000), ('Водитель электропогрузчика', 58500), ('Мастер смены', 70000), ('Мастер смены', 50000), ('Оператор по товародвижению', 57200), ('Кладовщик на центральный склад', 95000), ('Младший технолог', 60000), ('Специалист по подбору персонала', 65000), ('Бариста/Бармен/Официант', 57500), ('Секретарь/координатор департамента', 65000), ('Оператор управления прямых продаж', 50000), ('Оператор по операционной деятельности', 55000), ('Офис-менеджер', 60000), ('Специалист по администрированию документов', 70000), ('Диспетчер транспортного отдела экспресс-доставки', 70000), ('Руководитель смены склада / менеджер склада/администратор склада', 160000), ('Упаковщик в пекарню', 64700), ('Digital-менеджер', 94000), ('Менеджер минимаркета', 46750), ('Специалист торгового зала', 49500), ('Руководитель отдела контроля склада', 110000), ('Дизайнер', 100000), ('Кондитер ( 2 / 2 )', 70000), ('Логист b2c', 80000), ('Продавец-консультант в салон связи Мегафон (г. Иваново)', 45000), ('Начинающий специалист (работа из дома)', 55000), ('Специалист по подбору персонала', 50000), ('Специалист офиса продаж в салоне связи Мегафон (Москва)', 82000), ('Специалист по взаимодействию с оператором (по работе с контрагентами)', 70000), ('Продавец - консультант в салон связи "МегаФон"', 40000), ('Консультант на входящие звонки (удаленно)', 40000), ('Специалист по работе с корпоративными клиентами (чат, е-mail)', 37000), ('Специалист по работе с корпоративными клиентами (чат, е-mail)', 38000), ('Специалист Helpdesk', 65000), ('Специалист по работе с корпоративными клиентами (чат, е-mail)', 37000), ('Специалист по работе с корпоративными клиентами (чат, е-mail)', 37000), ('Консультант на входящие звонки (удаленно)', 40000), ('Специалист по работе с корпоративными клиентами (чат, е-mail)', 37000), ('Водитель-курьер на личном автомобиле г. Волгоград', 35000), ('Курьер', 55000), ('Специалист поддержки в чатах (удаленно) Владимир', 33000), ('Водитель-курьер на личном автомобиле', 35000), ('Специалист по обработке заказов в интернет-магазине', 45000), ('Продавец-консультант в "Мегафон" (Красная Пресня, 50)', 50000), ('Кладовщик-комплектовщик', 90000), ('SMM-менеджер', 35000), ('Диспетчер', 83000), ('Сменный администратор медицинского центра', 35000), ('Комплектовщик склада (косметика)', 90000), ('Кладовщик / Сборщик-комплектовщик', 72500), ('Аналитик (Ecxel, SQL)', 69000), ('Специалист чат-поддержки Магнит Доставка', 35000), ('Специалист чат-поддержки Магнит Доставка', 35000), ('Менеджер по документообороту', 65000), ('Бухгалтер (Помощник бухгалтера)', 40000), ('Специалист по документообороту', 31000), ('Инженер-строитель', 127500), ('Оператор 1С', 32500), ('Менеджер по развитию', 100000), ('Комплектовщик', 103000), ('Сервисный инженер', 51000), ('Работник склада/Слотчик', 106000), ('Инженер-химик', 51700), ('Специалист по работе с документами', 39000), ('Менеджер по закупкам / менеджер по снабжению (Строительство)', 90000), ('Ведущий инженер ПТО (внутренние инженерные системы - ОВ, ВК, ЭОМ, СС и ПБ)', 150000), ('Инженер-техник по обслуживанию слаботочных систем', 87500), ('Менеджер по персоналу', 120000), ('Специалист группы по казначейским операциям', 53500), ('Ведущий специалист (бухгалтер) РСБУ и налоговой отчетности', 70000), ('Техник по вентиляции и кондиционированию (в дочернее общество)', 70000), ('Менеджер по снабжению/закупкам', 100000), ('Менеджер по сбыту/продажам', 55000), ('Сотрудник предприятия', 40000)]
# th_5 =
# td_5 = [('Ведущий инженер по сопровождению серийного производства',), ('Сервисный инженер',), ('Ведущий инженер ПТО (внутренние инженерные системы - ОВ, ВК, ЭОМ, СС и ПБ)',), ('Ведущий инженер по сопровождению серийного производства',), ('Сервисный инженер',), ('Ведущий инженер ПТО (внутренние инженерные системы - ОВ, ВК, ЭОМ, СС и ПБ)',)]

# columns = len(table_head)  # Подсчитаем кол-во столбцов на будущее.
#
# table = PrettyTable(table_head)  # Определяем таблицу.
#
# # Cкопируем список td, на случай если он будет использоваться в коде дальше.
# td_data = table_data[:]
# # Входим в цикл который заполняет нашу таблицу.
# # Цикл будет выполняться до тех пор пока у нас не кончатся данные
# # для заполнения строк таблицы (список td_data).
# # while td_data:
# #     # Используя срез добавляем первые пять элементов в строку.
# #     # (columns = 5).
# #     table.add_row(td_data[:columns])
# #     # Используя срез переопределяем td_data так, чтобы он
# #     # больше не содержал первых 5 элементов.
# #     td_data = td_data[columns:]
#
# print(table)  # Печатаем таблицу


# def print_table(table_head, table_data):
#     columns = len(table_head)  # Подсчитаем кол-во столбцов на будущее.
#
#     table = PrettyTable(table_head)  # Определяем таблицу.
#
#     # Cкопируем список td, на случай если он будет использоваться в коде дальше.
#     td_data = table_data[:]
#     # Входим в цикл который заполняет нашу таблицу.
#     # Цикл будет выполняться до тех пор пока у нас не кончатся данные
#     # для заполнения строк таблицы (список td_data).
#     while td_data:
#         # Используя срез добавляем первые пять элементов в строку.
#         # (columns = 5).
#         table.add_row(td_data[:columns])
#         # Используя срез переопределяем td_data так, чтобы он
#         # больше не содержал первых 5 элементов.
#         td_data = td_data[columns:]
#     return table  # Печатаем таблицу
# print(print_table(th_1, td_1))